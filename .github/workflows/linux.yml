name: Ubuntu

on:
    push:
        branches: [ master ]
    pull_request:
        branches: [ master ]

jobs:
    compile_ubuntu:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          compiler: [ gcc , clang ]
          include:
              - compiler: gcc
                cc: gcc
                cxx: g++
              - compiler: clang
                cc: clang
                cxx: clang++
      steps:
          - uses: actions/checkout@v2
            with:
              submodules: true
              # TODO own Docker with all nec. preinstalled
          - name: Install Dependencies
            run: |
              sudo apt-get update --fix-missing
              sudo apt-get install -y make cmake libboost-all-dev lcov clinfo
              sudo apt-get install -y ${{ matrix.compiler }}
              sudo apt-cache search opencl
          - run: sudo apt-get install -f libomp-dev
            if: ${{ matrix.compiler == 'clang' }}
          - name: Build
            run: |
              mkdir build
              cd build 
              cmake .. -DCMAKE_INSTALL_PREFIX=../dist  -DCMAKE_C_COMPILER=${{ matrix.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}  -DTOO_BOOST_STATIC=1 -DTOO_TEST_MPI=1
              make install
          - name: Test
            run: |
              cd build
              make test
          - run: lscpu
          - run: sudo clinfo
          #- name: OpenCL?
          #  run: sudo ./dist/test/openclTestC
          - uses: actions/upload-artifact@v2
            with:
              name: ${{ matrix.compiler }}-test-bin
              path: dist/

    compile_ubuntu_coverage:
        runs-on: ubuntu-latest
        strategy:
          matrix:
            compiler: [ gcc ] #[ gcc , clang ]
            include:
                - compiler: gcc
                  cc: gcc
                  cxx: g++
                #- compiler: clang
                #  cc: clang
                #  cxx: clang++
        steps:
            - uses: actions/checkout@v2
              with:
                submodules: true
            - name: Install Dependencies
              run: |
                sudo apt-get update
                sudo apt-get install -y make cmake libboost-all-dev lcov 
                sudo apt-get install -y ${{ matrix.compiler }}

            # OpenCL Intel Xeon CPU SDK
            - run: sudo apt-get install alien libnuma1 wget tar clinfo libxcb-dri3-0 libxcb-dri2-0 rpm
            - uses: actions/cache@v2
              id: cache-packages  # give it a name for checking the cache hit-or-not
              with:
                path: ./l_opencl_p_18.1.0.015/  # what we cache: the folder
                key: ${{ runner.os }}-download
            - run: | 
                wget https://registrationcenter-download.intel.com/akdlm/irc_nas/vcp/15532/l_opencl_p_18.1.0.015.tgz
                tar -xvf  l_opencl_p_18.1.0.015.tgz
              if: steps.cache-packages.outputs.cache-hit != 'true'
            - run: |
                cd l_opencl_p_18.1.0.015/
                printf 'accept\naccept\n1\n1\n1\n' | sudo ./install.sh
            - run: lscpu
            - run: sudo clinfo
            - run: clinfo
            # OpenCL End

            - name: Build
              run: |
                mkdir build
                cd build 
                cmake .. -DCMAKE_INSTALL_PREFIX=../dist  -DCMAKE_C_COMPILER=${{ matrix.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}  -DTOO_BOOST_STATIC=1 -DTOO_COVERAGE=1 -DTOO_TEST_MPI=1 -DTOO_TEST_OPENCL=1
                make install
            - name: Test & Coverage
              run: |
                cd build
                make coverage
            - name: Coveralls Parallel
              uses: coverallsapp/github-action@master
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }} 
                flag-name: ${{ matrix.compiler }}-coverage
                path-to-lcov: build/coverage.info
                parallel: true
    upload:
      needs: compile_ubuntu_coverage
      runs-on: ubuntu-latest
      steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          parallel-finished: true

